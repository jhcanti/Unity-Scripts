// con este script se gestionara el pool de Gameobjects como por ejemplo proyectiles

// utilizaremos una Queue por ser más rápida que una lista para este objetivo, además
// para poder gestionar mas de un pool de objetos, por ejemplo, uno para los proyectiles
// del Player y otro para los del enemigo usaremos un diccionario

Dictionary<string, Queue<GameObject>> poolDictionary;

// para poder crear más fácil distintos pools crearemos una clase y una lista para
// almacenarlos

[System.Serializable]
public class Pool
{
  public string tag;
  public GameObject prefab;
  public int size;  // número máximo de objetos en el pool
}

List<Pool> pools;


// en el metodo Start crearemos todos los objetos de cada uno de los pools

private void Start()
{
    poolDictionary = new Dictionary<string, Queue<GameObject>>();

    // ahora recorremos la lista de pools para crear y añadir las Queues
    foreach (Pool pool in pools)
    {
        // y creamos la Queue
        Queue<GameObject> objectPool = new Queue<GameObject>();

        // despues creamos cada uno de los Gameobjects de la Pool
        // los desactivamos y los añadimos a la Queue
        for (int i = 0; i < pool.size; i++)
        {
            GameObject obj = Instantiate(pool.prefab);
            obj.SetActive(false);
            objectPool.Enqueue(obj);
        }

        // por ultimo añadimos el pool al diccionario
        poolDictionary.Add(pool.tag, objectPool);
    }
}

// Ahora crearemos un método para sacar un objeto de un pool determinado y ponerlo en la escena

public GameObject SpawnFromPool (string tag, Vector3 position, Quaternion rotation)
{
    GameObject objectToSpawn = poolDictionary[tag].Dequeue();

    objectToSpawn.SetActive(true);
    objectToSpawn.transform.position = position;
    objectToSpawn.transform.rotation = rotation;

    // volvemos a meter el objeto al final de la Cola    
    poolDictionary[tag].Enqueue(objectToSpawn);

    return objectToSpawn;
}


// este script deberia seguir un patron Singleton para poder usarse desde cualquier sitio
// en el caso de proyectiles que se deben destruir al impactar, el propio proyectil deberia
// desactivarse
