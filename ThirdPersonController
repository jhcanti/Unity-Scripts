using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ThirdPersonController : MonoBehaviour
{
    CharacterController controller;
    Vector3 playerVelocity;
    Animator anim;
    public Transform cam;

    bool isGrounded;
    bool isJumping;
    float jumpHeight = 1.5f;
    float gravity = -9.81f;

    float maxSpeed = 5f;
    float speed;
    float velocity;
    float turnSmoothTime = 0.1f;
    float turnSmoothVelocity;
    float horizontal;
    float vertical;    


    void Awake()
    {
        controller = GetComponent<CharacterController>();
        anim = GetComponent<Animator>();        
    }


    void Update()
    {
        // comprobamos si estamos tocando el suelo y en ese caso dejamos de aplicar la gravedad        
        isGrounded = controller.isGrounded;
        if (isGrounded && playerVelocity.y < 0)
        {
            playerVelocity.y = 0f;
            isJumping = false;
            isGrounded = true;
        }

        horizontal = Input.GetAxis("Horizontal");
        vertical = Input.GetAxis("Vertical");
        float verticalAbs = Mathf.Abs(vertical);
        float horizontalAbs = Mathf.Abs(horizontal);

        // velocity controla el Animator
        velocity = (verticalAbs >= horizontalAbs) ? verticalAbs : horizontalAbs;

        // speed controla la velocidad del Player en función de la presion en los sticks del Gamepad
        speed = velocity * maxSpeed;

        // con izq/der controlamos el movimiento en el eje X
        // con arr/aba controlamos el movimiento hacia adelante y atras, eje Z
        // normalizamos el vector para que no vaya mas rapido al ir en diagonal
        Vector3 direction = new Vector3(horizontal, 0f, vertical).normalized;

        if (direction.magnitude >= 0.1f)
        {
            // debemos rotar el player en la direccion que esta caminando el player
            // para calcular la rotacion usaremos la funcion Mathf.Atan2 que devuelve el angulo entre el eje X
            // y un vector dado (x,y), pero en Unity el angulo 0 se corresponde con el eje Z (forward)
            // por lo que debemos dar la vuelta a fórmula y poner primero la coordenada X.
            // la funcion devuelve el angulo en radianes, hay que pasarlo a grados.
            // Ademas queremos que al girar la cámara el player rote hacia donde esta mirando la camara, para
            // ello hay que sumarle la rotacion en y de la camara.
            float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg + cam.eulerAngles.y;

            // antes de rotar el player vamos a suavizar el movimiento de rotacion
            float angle = Mathf.SmoothDampAngle(transform.eulerAngles.y, targetAngle, ref turnSmoothVelocity, turnSmoothTime);
            transform.rotation = Quaternion.Euler(0f, angle, 0f);

            // ademas de rotar el player hacia donde mira la camara debemos cambiar el Vector direction
            // para que apunte tambien a donde mira la camara, esto lo conseguimos multiplicando el Vector.forward
            // por la rotacion calculada
            Vector3 moveDir = Quaternion.Euler(0f, targetAngle, 0f) * Vector3.forward;
            controller.Move(moveDir.normalized * speed * Time.deltaTime);
        }

        // si ha pulsado Jump y esta tocando el suelo, aplicamos el impulso
        if (Input.GetButtonDown("Jump") && isGrounded)
        {
            playerVelocity.y += Mathf.Sqrt(jumpHeight * -3f * gravity);
            isJumping = true;
            isGrounded = false;
        }

        // controlamos la velocidad vertical del Player, segun la formula matematica se calcula multiplicando
        // la gravedad por el tiempo al cuadrado, es por eso que multiplicamos 2 veces por Time.deltatime
        playerVelocity.y += gravity * Time.deltaTime;
        controller.Move(playerVelocity * Time.deltaTime);        
    }


    void LateUpdate()
    {        
        anim.SetBool("IsGrounded", isGrounded);
        anim.SetBool("IsJumping", isJumping);
        anim.SetFloat("Speed", velocity);
        anim.SetFloat("VerticalVelocity", playerVelocity.y);
    }
}
