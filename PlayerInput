// Este script sirve para guardar los inputs desde el Update()
// en sincronia con FixedUpdate()

using UnityEngine;

// Primero nos aseguramos que este script se ejecuta antes que cualquier otro script del jugador
// asi preveemos lag en los inputs

[DefaultExecutionOrder(-100)]
public class PlayerInput : MonoBehaviour
{
	[HideInInspector] public float horizontal;
	[HideInInspector] public bool jumpHeld;
	[HideInInspector] public bool jumpPressed;
	[HideInInspector] public bool crouchHeld;
	[HideInInspector] public bool crouchPressed;
  bool readyToClear;
  
  void Update()
	{
		ClearInput();

		//If the Game Manager says the game is over, exit
		if (GameManager.IsGameOver())
			return;

		ProcessInputs();

		//Clamp the horizontal input to be between -1 and 1
		horizontal = Mathf.Clamp(horizontal, -1f, 1f);
	}
  
  void FixedUpdate()
	{
		//In FixedUpdate() we set a flag that lets inputs to be cleared out during the 
		//next Update(). This ensures that all code gets to use the current inputs
		readyToClear = true;
	}
  
  void ClearInput()
	{
		if (!readyToClear)
			return;

		horizontal		= 0f;
		jumpPressed		= false;
		jumpHeld		= false;
		crouchPressed	= false;
		crouchHeld		= false;
		readyToClear	= false;
	}
  
  void ProcessInputs()
	{
		//Accumulate horizontal axis input
		horizontal		+= Input.GetAxis("Horizontal");

		//Accumulate button inputs
		jumpPressed		= jumpPressed || Input.GetButtonDown("Jump");
		jumpHeld		= jumpHeld || Input.GetButton("Jump");

		crouchPressed	= crouchPressed || Input.GetButtonDown("Crouch");
		crouchHeld		= crouchHeld || Input.GetButton("Crouch");
	}
  
  
}
