# este script crea una textura de 100x100 pixels mediante la función matemática
# PerlinNoise y por cada pixel crea un Sprite de 512x512

using UnityEngine;

public class MapGenerator : MonoBehaviour {

    public int width = 100;
    public int height = 100;
    float tileSize = 512 / 100;
    public float scale = 10f;
    public int seed;
    public Region[] regions;
    [SerializeField] GameObject[,] tiles;
    public GameObject prefab;

    float time;
    

    private void Awake()
    {
        tiles = new GameObject[width, height];
        CreateTiles(width, height);        
    }


    void CreateTiles(int _width, int _height)
    {
        GameObject tile;        
        float offset = tileSize / 2;
        float coodX = (_width - 1) * -offset;
        float coodY = (_height - 1) * offset;
        float minCoodX = coodX;
        float maxCoodX = (_width - 1) * offset;                

        for (int y = 0; y < _height; y++)
        {
            for (int x = 0; x < _width; x++)
            {
                Vector2 position = new Vector2(coodX, coodY);
                tile = Instantiate(prefab, position, Quaternion.identity);
                tiles[y, x] = tile;                
                coodX += tileSize;
                if (coodX > maxCoodX)
                {
                    coodX = minCoodX;
                }
            }

            coodY -= tileSize;            
        }
    }


    private void Start()
    {        
        int[,] map = GenerateMap();                

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {                
                foreach (Region region in regions)
                {
                    if (region.tileNumber == map[y, x])
                    {
                        Sprite tile = region.tile;
                        tiles[y, x].GetComponent<SpriteRenderer>().sprite = tile;
                        break;
                    }                    
                }                        
            }
        }
        
    }


    int[,] GenerateMap()
    {
        int[,] map = new int[width, height];

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                map[y, x] = CalculateTileNumber(x, y);                                
            }
        }
        
        return map;
    }


    int CalculateTileNumber(int x, int y)
    {
        int tileNumber = 0;
        System.Random pseudo = new System.Random(seed);

        float offsetX = pseudo.Next(-100000, 100000);
        float offsetY = pseudo.Next(-100000, 100000);

        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / height * scale + offsetY;

        float sample = Mathf.PerlinNoise(xCoord, yCoord);

        
        foreach (Region region in regions)
        {
            if (sample <= region.height)
            {
                tileNumber = region.tileNumber;
                break;
            }
        }

        return tileNumber;
    }


    private void Update()
    {
        time += Time.deltaTime;
    }
}
